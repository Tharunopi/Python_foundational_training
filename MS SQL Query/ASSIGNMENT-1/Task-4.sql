USE TicketBookingSystem

SELECT * FROM Booking 
SELECT * FROM Event 
SELECT * FROM Customers 
SELECT * FROM Venu 

--1. Calculate the Average Ticket Price for Events in Each Venue Using a Subquery.
SELECT venue_name,  
(SELECT AVG(ticket_price) FROM Event e WHERE e.venue_id = v.venue_id) AS average
FROM Venu v
WHERE EXISTS (SELECT 1 FROM Event e WHERE e.venue_id = v.venue_id)


--2. Find Events with More Than 50% of Tickets Sold using subquery.
SELECT event_id, SUM(num_tickets) AS tickets_sold, 
(SELECT e.total_seats FROM Event e WHERE e.event_id = b.event_id) 
AS total FROM booking b
GROUP BY event_id
HAVING SUM(num_tickets) > (SELECT total_seats/2 AS num_tickets FROM Event e
							WHERE e.event_id = b.event_id)

--3. Calculate the Total Number of Tickets Sold for Each Event.
SELECT b.event_id,
(SELECT event_name FROM Event e WHERE e.event_id = b.event_id) AS event_name ,
SUM(b.num_tickets) AS tickets_sold FROM Booking b
GROUP BY b.event_id

--4. Find Users Who Have Not Booked Any Tickets Using a NOT EXISTS Subquery.
SELECT * FROM Customers c
WHERE NOT EXISTS (SELECT 1 FROM Booking b
			  WHERE b.customer_id = c.customer_id)

--5. List Events with No Ticket Sales Using a NOT IN Subquery.
SELECT event_name FROM Event e
WHERE e.event_id NOT IN (SELECT b.event_id FROM Booking b)

--6. Calculate the Total Number of Tickets Sold for Each Event Type Using a Subquery in the FROM Clause.
SELECT (SELECT e.event_name FROM Event e WHERE e.event_id = t.event_id) AS event_name, 
t.tickets_sold FROM (SELECT b.event_id, SUM(b.num_tickets) AS tickets_sold FROM Booking b 
GROUP BY b.event_id) AS t

--7. Find Events with Ticket Prices Higher Than the Average Ticket Price Using a Subquery in the WHERE Clause.
SELECT e.event_name, e.ticket_price FROM Event e
WHERE e.ticket_price >= (SELECT AVG(ticket_price) FROM Event)

--8. Calculate the Total Revenue Generated by Events for Each User Using a Correlated Subquery
SELECT (SELECT customer_name FROM Customers c WHERE b.customer_id = c.customer_id) AS customer_name,
(SELECT e.event_name FROM Event e WHERE e.event_id = b.event_id) AS event_name ,
SUM(b.total_cost) AS revenue FROM Booking b
GROUP BY b.customer_id, b.event_id
ORDER BY revenue DESC 

--9. List Users Who Have Booked Tickets for Events in a Given Venue Using a Subquery in the WHERE Clause.
SELECT (SELECT v.venue_name FROM Venu v WHERE e.venue_id = v.venue_id) AS venue, e.event_name, 
(SELECT c.customer_name FROM Customers c WHERE c.booking_id = e.booking_id) AS customer_name 
FROM Event e
WHERE e.venue_id = 3

--10. Calculate the Total Number of Tickets Sold for Each Event Category Using a Subquery with GROUP BY.
SELECT event_type, SUM(total_tickets) AS total_tickets FROM (SELECT e.event_type, 
(SELECT b.num_tickets FROM Booking b WHERE e.booking_id = b.booking_id) AS total_tickets
FROM Event e) temp_table
GROUP BY event_type

--11. Find Users Who Have Booked Tickets for Events in each Month Using a Subquery with DATE_FORMAT.
SELECT MONTH(b.booking_date) AS month, 
(SELECT c.customer_name FROM Customers c WHERE c.customer_id = b.customer_id) AS customer_name
FROM Booking b

--12. Calculate the Average Ticket Price for Events in Each Venue Using a Subquery
SELECT venue_name,  
(SELECT AVG(ticket_price) FROM Event e WHERE e.venue_id = v.venue_id) AS average
FROM Venu v
WHERE EXISTS (SELECT 1 FROM Event e WHERE e.venue_id = v.venue_id)