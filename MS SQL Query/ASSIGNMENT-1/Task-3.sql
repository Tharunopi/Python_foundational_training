USE TicketBookingSystem

SELECT * FROM Booking 
SELECT * FROM Event 
SELECT * FROM Customers  
SELECT * FROM Venu 

--1. Write a SQL query to list events and their Average ticket prices
SELECT event_name, AVG(ticket_price) AS average_ticket_price FROM Event 
GROUP BY event_name

--2. Write a SQL query to calculate the total revenue generated by events.
SELECT SUM(total_cost) AS total_revenue FROM booking

--3. Write a SQL query to find the event with the highest ticket sales 
SELECT TOP 1 e.event_name, SUM(b.num_tickets) AS tickets_sold FROM Booking b 
INNER JOIN Event e 
ON b.booking_id = e.booking_id
GROUP BY e.event_name
ORDER BY tickets_sold DESC 

--4. Write a SQL query to calculate the total number of tickets sold for each event
SELECT e.event_name, SUM(b.num_tickets) AS total_tickets_sold FROM Event e
INNER JOIN Booking b ON e.booking_id = b.booking_id
GROUP BY e.event_name
ORDER BY total_tickets_sold DESC 

--5. Write a SQL query to find events with no ticket sales
SELECT e.event_name AS no_sales FROM Event e
LEFT JOIN Booking b 
ON e.booking_id = b.booking_id
WHERE b.booking_id is NULL 

--6. Write a SQL query to find the user who has booked the most tickets
SELECT TOP 1 c.customer_name, SUM(b.num_tickets) AS tickets_sold FROM Customers c
INNER JOIN Booking b ON 
c.customer_id = b.customer_id
GROUP BY c.customer_name
ORDER BY tickets_sold DESC 

--7. Write a SQL query to list events and total number of tickets sold for each month
SELECT MONTH(booking_date) AS month, SUM(num_tickets) AS tickets_sold FROM Booking
GROUP BY MONTH(booking_date)
ORDER BY tickets_sold DESC 

--8. Write a SQL query to calculate the average ticket price for events in each venve
SELECT v.venue_name, e.event_name, AVG(e.ticket_price) AS average_ticket_price FROM Event e
INNER JOIN Venu v 
ON e.venue_id = v.venue_id
GROUP BY v.venue_name, e.event_name

--9. Write a SQL query to calculate the total number of tickets sold for each event type
SELECT e.event_type, SUM(b.num_tickets) AS tickets_sold FROM Event e
INNER JOIN Booking b 
ON e.booking_id = b.booking_id
GROUP BY e.event_type
ORDER BY tickets_sold DESC 

--10. Write a SQL query to calculate the total revenue generated by events in each year
SELECT YEAR(b.booking_date) AS year, SUM(b.total_cost) AS revenue FROM Booking b
GROUP BY YEAR(b.booking_date)
ORDER BY revenue

--11. Write a SQL query to list users who have booked tickets for multiple events
SELECT c.customer_name, COUNT(b.customer_id) AS events_booked FROM Booking b
RIGHT JOIN Customers c ON 
b.customer_id = c.customer_id
GROUP BY c.customer_name
HAVING COUNT(b.customer_id) >= 2

--12. Write a SQL query to calculate the total revenue generated by events for each user.
SELECT c.customer_name, e.event_name, SUM(b.total_cost) AS revenue FROM Customers c
INNER JOIN Booking b 
ON c.customer_id = b.customer_id
INNER JOIN Event e 
ON b.event_id = e.event_id
GROUP BY c.customer_name, e.event_name
ORDER BY revenue DESC 

--13. Write a SQL query to calculate the average ticket price for events in each category and venue
SELECT e.event_type, v.venue_name, e.event_name, AVG(e.ticket_price) AS average FROM Event e
INNER JOIN Venu v 
ON e.venue_id = v.venue_id
GROUP BY e.event_type, v.venue_name, e.event_name
ORDER BY average DESC 

--14. Write a SQL query to list users and the total number of tickets they've purchased in the last 30 days.
SELECT c.customer_name, SUM(b.num_tickets) FROM Booking b
INNER JOIN Customers c 
ON b.booking_id = c.booking_id
GROUP BY c.customer_name
HAVING DATEDIFF('DAY', b.booking_date, getdate())